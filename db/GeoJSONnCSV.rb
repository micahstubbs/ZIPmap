require 'yajl/json_gem'  #took 130sec to read 1.3G sorted GSON
# require 'json/stream'  #took more and 10 minute and still not finished, occupied more than 4G memory.
require 'csv'

jsonfilename = 'zcta5test.json' # 'zcta5test.json'
ocsvfilename = 'testCSV.csv'
ouputjsonfile= 'combined.json'

header = "X,Y,GEO.id2,GEO.id,GEO.id2,GEO.display-label,HC01_VC03,HC02_VC03,HC03_VC03,HC04_VC03,HC01_VC04,HC02_VC04,HC03_VC04,HC04_VC04,HC01_VC05,HC02_VC05,HC03_VC05,HC04_VC05,HC01_VC08,HC02_VC08,HC03_VC08,HC04_VC08,HC01_VC09,HC02_VC09,HC03_VC09,HC04_VC09,HC01_VC10,HC02_VC10,HC03_VC10,HC04_VC10,HC01_VC11,HC02_VC11,HC03_VC11,HC04_VC11,HC01_VC12,HC02_VC12,HC03_VC12,HC04_VC12,HC01_VC13,HC02_VC13,HC03_VC13,HC04_VC13,HC01_VC14,HC02_VC14,HC03_VC14,HC04_VC14,HC01_VC15,HC02_VC15,HC03_VC15,HC04_VC15,HC01_VC16,HC02_VC16,HC03_VC16,HC04_VC16,HC01_VC17,HC02_VC17,HC03_VC17,HC04_VC17,HC01_VC18,HC02_VC18,HC03_VC18,HC04_VC18,HC01_VC19,HC02_VC19,HC03_VC19,HC04_VC19,HC01_VC20,HC02_VC20,HC03_VC20,HC04_VC20,HC01_VC23,HC02_VC23,HC03_VC23,HC04_VC23,HC01_VC26,HC02_VC26,HC03_VC26,HC04_VC26,HC01_VC27,HC02_VC27,HC03_VC27,HC04_VC27,HC01_VC28,HC02_VC28,HC03_VC28,HC04_VC28,HC01_VC29,HC02_VC29,HC03_VC29,HC04_VC29,HC01_VC32,HC02_VC32,HC03_VC32,HC04_VC32,HC01_VC33,HC02_VC33,HC03_VC33,HC04_VC33,HC01_VC34,HC02_VC34,HC03_VC34,HC04_VC34,HC01_VC37,HC02_VC37,HC03_VC37,HC04_VC37,HC01_VC38,HC02_VC38,HC03_VC38,HC04_VC38,HC01_VC39,HC02_VC39,HC03_VC39,HC04_VC39,HC01_VC43,HC02_VC43,HC03_VC43,HC04_VC43,HC01_VC44,HC02_VC44,HC03_VC44,HC04_VC44,HC01_VC45,HC02_VC45,HC03_VC45,HC04_VC45,HC01_VC48,HC02_VC48,HC03_VC48,HC04_VC48,HC01_VC49,HC02_VC49,HC03_VC49,HC04_VC49,HC01_VC50,HC02_VC50,HC03_VC50,HC04_VC50,HC01_VC51,HC02_VC51,HC03_VC51,HC04_VC51,HC01_VC52,HC02_VC52,HC03_VC52,HC04_VC52,HC01_VC53,HC02_VC53,HC03_VC53,HC04_VC53,HC01_VC54,HC02_VC54,HC03_VC54,HC04_VC54,HC01_VC55,HC02_VC55,HC03_VC55,HC04_VC55,HC01_VC56,HC02_VC56,HC03_VC56,HC04_VC56,HC01_VC57,HC02_VC57,HC03_VC57,HC04_VC57,HC01_VC58,HC02_VC58,HC03_VC58,HC04_VC58,HC01_VC59,HC02_VC59,HC03_VC59,HC04_VC59,HC01_VC60,HC02_VC60,HC03_VC60,HC04_VC60,HC01_VC61,HC02_VC61,HC03_VC61,HC04_VC61,HC01_VC62,HC02_VC62,HC03_VC62,HC04_VC62,HC01_VC63,HC02_VC63,HC03_VC63,HC04_VC63,HC01_VC64,HC02_VC64,HC03_VC64,HC04_VC64,HC01_VC65,HC02_VC65,HC03_VC65,HC04_VC65,HC01_VC66,HC02_VC66,HC03_VC66,HC04_VC66,HC01_VC67,HC02_VC67,HC03_VC67,HC04_VC67,HC01_VC68,HC02_VC68,HC03_VC68,HC04_VC68,HC01_VC69,HC02_VC69,HC03_VC69,HC04_VC69,HC01_VC70,HC02_VC70,HC03_VC70,HC04_VC70,HC01_VC71,HC02_VC71,HC03_VC71,HC04_VC71,HC01_VC72,HC02_VC72,HC03_VC72,HC04_VC72,HC01_VC73,HC02_VC73,HC03_VC73,HC04_VC73,HC01_VC74,HC02_VC74,HC03_VC74,HC04_VC74,HC01_VC77,HC02_VC77,HC03_VC77,HC04_VC77,HC01_VC78,HC02_VC78,HC03_VC78,HC04_VC78,HC01_VC79,HC02_VC79,HC03_VC79,HC04_VC79,HC01_VC80,HC02_VC80,HC03_VC80,HC04_VC80,HC01_VC81,HC02_VC81,HC03_VC81,HC04_VC81,HC01_VC82,HC02_VC82,HC03_VC82,HC04_VC82,HC01_VC83,HC02_VC83,HC03_VC83,HC04_VC83,HC01_VC87,HC02_VC87,HC03_VC87,HC04_VC87,HC01_VC88,HC02_VC88,HC03_VC88,HC04_VC88,HC01_VC89,HC02_VC89,HC03_VC89,HC04_VC89,HC01_VC90,HC02_VC90,HC03_VC90,HC04_VC90,HC01_VC91,HC02_VC91,HC03_VC91,HC04_VC91,HC01_VC92,HC02_VC92,HC03_VC92,HC04_VC92,HC01_VC93,HC02_VC93,HC03_VC93,HC04_VC93,HC01_VC94,HC02_VC94,HC03_VC94,HC04_VC94,HC01_VC95,HC02_VC95,HC03_VC95,HC04_VC95,HC01_VC96,HC02_VC96,HC03_VC96,HC04_VC96,HC01_VC97,HC02_VC97,HC03_VC97,HC04_VC97,HC01_VC98,HC02_VC98,HC03_VC98,HC04_VC98,HC01_VC99,HC02_VC99,HC03_VC99,HC04_VC99,HC01_VC100,HC02_VC100,HC03_VC100,HC04_VC100,HC01_VC101,HC02_VC101,HC03_VC101,HC04_VC101,HC01_VC102,HC02_VC102,HC03_VC102,HC04_VC102,HC01_VC104,HC02_VC104,HC03_VC104,HC04_VC104,GEO.id2,GEO.display-label,HC01_EST_VC02,HC01_MOE_VC02,HC02_EST_VC02,HC02_MOE_VC02,HC01_EST_VC04,HC01_MOE_VC04,HC02_EST_VC04,HC02_MOE_VC04,HC01_EST_VC05,HC01_MOE_VC05,HC02_EST_VC05,HC02_MOE_VC05,HC01_EST_VC06,HC01_MOE_VC06,HC02_EST_VC06,HC02_MOE_VC06,HC01_EST_VC07,HC01_MOE_VC07,HC02_EST_VC07,HC02_MOE_VC07,HC01_EST_VC08,HC01_MOE_VC08,HC02_EST_VC08,HC02_MOE_VC08,HC01_EST_VC09,HC01_MOE_VC09,HC02_EST_VC09,HC02_MOE_VC09,HC01_EST_VC10,HC01_MOE_VC10,HC02_EST_VC10,HC02_MOE_VC10,HC01_EST_VC12,HC01_MOE_VC12,HC02_EST_VC12,HC02_MOE_VC12,HC01_EST_VC13,HC01_MOE_VC13,HC02_EST_VC13,HC02_MOE_VC13,HC01_EST_VC16,HC01_MOE_VC16,HC02_EST_VC16,HC02_MOE_VC16,HC01_EST_VC17,HC01_MOE_VC17,HC02_EST_VC17,HC02_MOE_VC17,HC01_EST_VC18,HC01_MOE_VC18,HC02_EST_VC18,HC02_MOE_VC18,HC01_EST_VC19,HC01_MOE_VC19,HC02_EST_VC19,HC02_MOE_VC19,HC01_EST_VC22,HC01_MOE_VC22,HC02_EST_VC22,HC02_MOE_VC22,HC01_EST_VC23,HC01_MOE_VC23,HC02_EST_VC23,HC02_MOE_VC23,HC01_EST_VC24,HC01_MOE_VC24,HC02_EST_VC24,HC02_MOE_VC24,HC01_EST_VC25,HC01_MOE_VC25,HC02_EST_VC25,HC02_MOE_VC25,HC01_EST_VC26,HC01_MOE_VC26,HC02_EST_VC26,HC02_MOE_VC26,HC01_EST_VC27,HC01_MOE_VC27,HC02_EST_VC27,HC02_MOE_VC27,HC01_EST_VC30,HC01_MOE_VC30,HC02_EST_VC30,HC02_MOE_VC30,HC01_EST_VC31,HC01_MOE_VC31,HC02_EST_VC31,HC02_MOE_VC31,HC01_EST_VC32,HC01_MOE_VC32,HC02_EST_VC32,HC02_MOE_VC32,HC01_EST_VC33,HC01_MOE_VC33,HC02_EST_VC33,HC02_MOE_VC33,HC01_EST_VC34,HC01_MOE_VC34,HC02_EST_VC34,HC02_MOE_VC34,HC01_EST_VC35,HC01_MOE_VC35,HC02_EST_VC35,HC02_MOE_VC35,HC01_EST_VC36,HC01_MOE_VC36,HC02_EST_VC36,HC02_MOE_VC36,HC01_EST_VC39,HC01_MOE_VC39,HC02_EST_VC39,HC02_MOE_VC39,HC01_EST_VC40,HC01_MOE_VC40,HC02_EST_VC40,HC02_MOE_VC40,HC01_EST_VC41,HC01_MOE_VC41,HC02_EST_VC41,HC02_MOE_VC41".split(',')

puts Time.now
json = File.new(jsonfilename, 'r')  #=> #<File:zcta5test.json>
parserG = Yajl::Parser.new #=> #<Yajl::Parser:0x007f87f2662868>
hash = parserG.parse(json)   #hash['features'].class #=> Array, length = 3
# hash['features'][1]['properties']  #=> {"ZCTA5CE10"=>"04758", "GEOID10"=>"04758", "CLASSFP10"=>"B5", "MTFCC10"=>"G6350", "FUNCSTAT10"=>"S", "ALAND10"=>91006829.0, "AWATER10"=>191946.0, "INTPTLAT10"=>"+46.5592719", "INTPTLON10"=>"-067.8532254"}
puts Time.now

ouputjsonfile
outputs = File.open(ouputjsonfile, "w")
outputs.puts '{"type": "FeatureCollection","features": ['
# hash['features'][1]['properties']["ZCTA5CE10"]  #=> "04758"
#hash['features'].each{|e|p e['properties']["ZCTA5CE10"]}
#output = "\n"

CSV.foreach(ocsvfilename) do |row|
  next if row[2] == "GEO.id2"
  print $., (row[2] == hash['features'][$.-2]['properties']["ZCTA5CE10"] ? "." : "X")
  print row[2], " ", hash['features'][$.-2]['properties']["ZCTA5CE10"], "\n"

  header.each_index do |index|
    next if index <= 4  #redundant data
    hash['features'][$.-2]['properties'][header[index]]=row[index]
  end

  outputs.puts Yajl::Encoder.encode(hash['features'][$.-2])
end
outputs.puts ']}'
outputs.close
